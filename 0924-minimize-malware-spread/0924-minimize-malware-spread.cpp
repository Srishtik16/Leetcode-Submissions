class DSU {
public:
    vector<int> parent, sizes;
    int components;
    DSU(int n) {
        parent.resize(n);
        iota(parent.begin(), parent.end(), 0);
        sizes.assign(n, 1);
        components = n;
    }
    int find(int node) {
        return node == parent[node] ? node : parent[node] = find(parent[node]);
    }
    bool unite(int u, int v) {
        u = find(u);
        v = find(v);
        if(u == v) {
            return false;
        }
        if(sizes[u] < sizes[v]) {
            swap(u, v);
        }
        sizes[u] += sizes[v];
        parent[v] = u;
        components--;
        return true;
    }
};
class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n = graph.size();
        DSU dsu(n);
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < n; j++) {
                if(graph[i][j] == 1) {
                    dsu.unite(i, j);
                }
            }
        }
        map<int, int> cnt;
        for(auto i: initial) {
            cnt[dsu.find(i)]++;
        }
        int maxSize = 0, node = *min_element(initial.begin(), initial.end());
        for(auto x: initial) {
            if(cnt[dsu.find(x)] == 1) {
                if(dsu.sizes[dsu.find(x)] > maxSize) {
                    maxSize = dsu.sizes[dsu.find(x)];
                    node = x;
                }
                else if(dsu.sizes[dsu.find(x)] == maxSize) {
                    node = min(node, x);
                }
            }
        }
        return node;
    }
};