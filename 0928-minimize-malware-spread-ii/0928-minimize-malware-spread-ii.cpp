class DSU {
public: 
    vector<int> parent, sizes;
    int components;
    DSU(int n) {
        parent.resize(n);
        iota(parent.begin(), parent.end(), 0);
        sizes.assign(n, 1);
        components = n;
    }
    int find(int node) {
        return node == parent[node] ? node : parent[node] = find(parent[node]);
    }
    bool unite(int u, int v) {
        u = find(u);
        v = find(v);
        if(u == v) {
            return false;
        }
        if(sizes[u] < sizes[v]) {
            swap(u, v);
        }
        sizes[u] += sizes[v];
        parent[v] = u;
        components--;
        return true;
    }
};
class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n = graph.size();
        vector<bool> infected(n, false);
        for(auto x: initial) {
            infected[x] = true;
        }
        DSU dsu(n);
        for(int i = 0; i < n; i++) {
            if(!infected[i]) {
                for(int j = i + 1; j < n; j++) {
                    if(!infected[j] && graph[i][j] == 1) {
                        dsu.unite(i, j);
                    }
                }
            }
        }
        map<int, set<int>> comps;
        map<int, int> conns;
        for(auto x: initial) {
            for(int i = 0; i < n; i++) {
                if(!infected[i] && graph[i][x] == 1) {
                    comps[x].insert(dsu.find(i)); // track components this bad node is connected to
                }
            }
            for(auto u: comps[x]) {
                conns[u]++; // no. of bad nodes connected to this component
            }
        }
        int best = 0, node = initial[0];
        for(auto x: initial) {
            int howMany = 0;
            for(auto u: comps[x]) {
                if(conns[u] == 1) {
                    howMany += dsu.sizes[dsu.find(u)];
                }
            }
            if(best < howMany) {
                best = howMany;
                node = x;
            }
            else if(best == howMany) {
                node = min(node, x);
            }
        }
        return node;
    }
};